// Using the iterative method
// three pointer approach
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* pre=NULL;
        ListNode* fo=head;
        ListNode* curr=head;
        while(curr!=NULL){
            fo=curr->next;
            curr->next=pre;
            pre=curr;
            curr=fo;
        }
        return pre;
        
    }
};


//Using  a recursion

class Solution {
public:
    ListNode* reverse1(ListNode* cur, ListNode* prev){
        if(cur==NULL){
            return prev;
        }
        ListNode *fut=cur->next;
        cur->next=prev;
        return reverse1(fut,cur);

    }
    ListNode* reverseList(ListNode* head) {
        return reverse1(head,NULL);
        
    }
};
